<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.board.mappers.board">   <!-- 이때, 네임스페이스(namespace)는 각각의 매퍼를 구분하는 고유명이 됩니다. -->

	<!-- 게시물 목록 --> <!-- 테이블을 찾을 수 없다면, (데이버베이스.테이블) -->
	<select id="list" resultType="com.board.domain.BoardVO">  <!-- resultType는 데이터를 쿼리를 실행한 뒤 결과가 있을 경우에 사용 -->
		select
			b.bno, b.title, b.content, b.writer, b.regDate, vc.viewCnt
		from
			board.tbl_board b
		join board.tbl_view_count vc on b.bno = vc.bno
<!-- 		select -->
<!-- 			bno, title, content, writer, regDate, viewCnt -->
<!-- 		from -->
<!-- 			board.tbl_board -->
	</select>

	<!--  때 새 글번호새 게시물이  등록 되고 게시글 목록으로 돌아갈를 viewCount에 넣어준다.-->
	<insert id="newviewCountGolist" parameterType="com.board.domain.BoardVO">
		INSERT INTO board.tbl_view_count 
			(bno, viewCnt)
		VALUES
			((SELECT MAX(bno) FROM board.tbl_board), 0)
	</insert>

	<!-- 게시물 작성 -->
	<insert id="write" parameterType="com.board.domain.BoardVO">
	    insert into 
	    	board.tbl_board(title, content, writer)
	    	values(#{title}, #{content}, #{writer})
	</insert>
	
	<!-- 새로운 게시글이 작성되면 조회수 테이블에 입력을 한다. 그 번호와 조회수 초기화 진행 -->
<!-- 	<insert id="newviewCountinviewCountboard" parameterType="com.board.domain.BoardVO"> -->
<!-- 	    INSERT INTO board.tbl_view_count  -->
<!-- 	    	(bno, viewCnt) -->
<!-- 		VALUES -->
<!-- 			(#{bno}, 0) -->
<!-- 	</insert> -->
	
	<!-- parameterType는 입력받는 데이터, resultType는 출력할 데이터 -->
	<!-- 게시물 조회 -->		<!-- 정수(int)형인 게시물 번호를 보내고, 게시물의 데이터형인 BoardVO를 내보내게됩니다. 출력할 데이터란, 쿼리문이 실행된 결과 -->
<!-- 	<select id="view" parameterType="int" -->
<!-- 		resultType="com.board.domain.BoardVO"> -->
<!-- 		select -->
<!-- 			bno, title, content, writer, regDate, viewCnt -->
<!-- 		from -->
<!-- 			board.tbl_board -->
<!-- 		where -->
<!-- 			bno = #{bno} -->
<!-- 	</select> -->

	<!-- 게시물 조회 -->
	<select id="view" parameterType="int" resultType="com.board.domain.BoardVO">
		select
			b.bno, b.title, b.content, b.writer, b.regDate, vc.viewCnt
		from
			board.tbl_board b
		join board.tbl_view_count vc on b.bno = vc.bno
			where
		b.bno = #{bno}
<!-- 		select -->
<!-- 			* -->
<!-- 		from -->
<!-- 			board.tbl_board  -->
<!-- 		where -->
<!-- 			bno = #{bno} -->
	</select>
	
	<!-- 게시물 조회수 하나 올리는 쿼리 -->
	<update id="AddviewCountOne" parameterType="com.board.domain.BoardVO">
	    update board.tbl_view_count
	        set 
	            viewCnt = viewCnt + 1
	        where bno = #{bno}
	</update>

	<!-- 게시물 수정 -->
	<update id="modify" parameterType="com.board.domain.BoardVO">
		update board.tbl_board
			set
				title = #{title},
				content = #{content},
				writer = #{writer}
			where bno = #{bno}
	</update>

	<!-- 게시물 삭제 -->
	<delete id="delete" parameterType="int">
		delete
			from board.tbl_board
		where bno = #{bno}
	</delete>

	<!-- 게시물 총 갯수 -->
	<select id="count" resultType="int">
		select count(bno) from board.tbl_board
	</select>

	<!-- 게시물 총 갯수 + 검색 적용 -->
	<select id="searchCount" parameterType="hashMap" resultType="int">
		select count(bno) from board.tbl_board
		
		<if test='searchType.equals("title")'>
			WHERE title LIKE concat('%', #{keyword}, '%')
		</if>

		<if test='searchType.equals("content")'>
			WHERE content LIKE concat('%', #{keyword}, '%')
		</if>

		<if test='searchType.equals("title_content")'>
			WHERE title LIKE concat('%', #{keyword}, '%')
				or content LIKE concat('%', #{keyword}, '%')
		</if>

		<if test='searchType.equals("writer")'>
			WHERE writer LIKE concat('%', #{keyword}, '%')
		</if>
	</select>
	
	<!-- 게시물 목록 + 페이징 -->
	<select id="listPage" parameterType="hashMap" resultType="com.board.domain.BoardVO">
	 select
	 	bno, title, writer, regDate, viewCnt
	 from board.tbl_board
	 order by bno desc
	 	limit #{displayPost}, #{postNum}
	</select>

	<!-- 게시물 목록 + 페이징 + 검색 -->
	<select id="listPageSearch" parameterType="hashMap" resultType="com.board.domain.BoardVO">
		select
			b.bno, b.title, b.content, b.writer, b.regDate, vc.viewCnt
		from
			board.tbl_board b
		join board.tbl_view_count vc on b.bno = vc.bno

		<if test='searchType.equals("title")'>
			WHERE title LIKE concat('%', #{keyword}, '%')
		</if>

		<if test='searchType.equals("content")'>
			WHERE content LIKE concat('%', #{keyword}, '%')
		</if>

		<if test='searchType.equals("title_content")'>
			WHERE title LIKE concat('%', #{keyword}, '%')
				or content LIKE concat('%', #{keyword}, '%')
		</if>

		<if test='searchType.equals("writer")'>
			WHERE writer LIKE concat('%', #{keyword}, '%')
		</if>

		order by bno desc
			limit #{displayPost}, #{postNum}
	</select> 
	
</mapper>